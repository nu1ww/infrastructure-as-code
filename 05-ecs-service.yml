AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Service on cluster

Parameters:
  ServiceName:
    Type: String
  Env:
    Type: String
  MaxContainers:
    Type: Number
    Default : 10

Resources:
  Task:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: apis
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${Env}::ECSTaskExecutionRole'
      ContainerDefinitions:
        - Name: !Join [ "-", [ !Ref ServiceName, "con-def" ]]
          #nginx image use for testing purpose, later we can use commented actual ECR 
          #Image: nginx:1.17.7
          Image:
            Fn::ImportValue: !Sub '${Env}::RepoUri'
          Cpu: 256
          Memory: 512
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: 'apis'
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Join [ "-", [ !Ref ServiceName, api ]]

  Service:
    Type: AWS::ECS::Service
    DependsOn: ListenerRule
    Properties:
      ServiceName: !Join [ "-", [ !Ref ServiceName, service ]]
      TaskDefinition: !Ref Task
      Cluster:
        Fn::ImportValue: !Sub '${Env}::ECSCluster'
      LaunchType: FARGATE
      DesiredCount: 0
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 70
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub '${Env}::PublicSubnet1'
            - Fn::ImportValue: !Sub '${Env}::PublicSubnet2'
          SecurityGroups:
            - Fn::ImportValue: !Sub '${Env}::ContainerSecurityGroup'
      LoadBalancers:
        - ContainerName: !Sub '${ServiceName}-con-def'
          ContainerPort: 80
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${ServiceName}-tg'
      VpcId:
        Fn::ImportValue: !Sub '${Env}::VPC'
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 10
      TargetType: ip

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: 
        Fn::ImportValue: !Sub '${Env}::Listener'
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 1
      MaxCapacity: !Ref MaxContainers
      ResourceId: !Join
        - '/'
        - - service
          - Fn::ImportValue:
              !Sub '${Env}::ECSCluster'
          - !GetAtt Service.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: 
        Fn::ImportValue: 
          !Sub '${Env}::ECSTaskExecutionRole'

  ScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Service}ScaleUpPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  ScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${Service}ScaleDownPolicy'
      PolicyType: StepScaling
      ScalingTargetId: !Ref AutoScalingTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: -1

  AlarmHighRequests:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: TRUE
      AlarmActions:
        - !Ref ScaleUpPolicy
      AlarmDescription: !Sub
        - 'Scale Up Alarm based on requests for ${FargateServiceName}'
        - FargateServiceName: !GetAtt Service.Name
      ComparisonOperator: GreaterThanThreshold
      DatapointsToAlarm: 2
      Dimensions:
        - Name: TargetGroup
          Value: !GetAtt TargetGroup.TargetGroupFullName
      EvaluationPeriods: 3
      MetricName: RequestCountPerTarget
      Namespace: AWS/ApplicationELB
      OKActions:
        - !Ref ScaleDownPolicy
      Period: 60
      Statistic: Sum
      Threshold: 3000
      TreatMissingData: ignore
      Unit: None # comes from the metric


Outputs:

  ApiEndpoint:
    Description: API Endpoint
    Value: !Join ['', ['http://', Fn::ImportValue: !Sub '${Env}::ALBDNSName']]
    Export:
      Name: !Sub '${Env}::ApiEndpoint'

